Function =  block of statements that can be reused in a program
fn will be executed by a call to the fn

CREATING A fn
we use the Function keyword

        function myText(){
            echo "Hello world!";
        }

calling a function
        function myText() {
            echo "Hello world!";
        }

        myText();



    FUNCTION ARGUEMENTS
arguements = just like  a variable to pass thorough info 
example;
            function familyName($fname) {
                echo "$fname Refsnes.<br>";
            }

            familyName("Jani");
            familyName("Hege");
            familyName("Stale");
            familyName("Kai Jim");
            familyName("Borge");

fn with two arguements
    function familyName($fname, $year) {
        echo "$fname Refsnes. Born in $year <br>";
    }

    familyName("Hege", "1975");
    familyName("Stale", "1978");
    familyName("Kai Jim", "1983");

DEFAULT ARGUEMENT VALUE
we use default parameters 
example; setHeight() fn 

        function setHeight($minheight = 50) {
            echo "The height is : $minheight <br>";
        }

        setHeight(350);
        setHeight(); // will use the default value of 50
        setHeight(135);
        setHeight(80);



functions - Returning values 
we use return statement to let a fn return a value

example ; 
        function sum($x, $y) {
            $z = $x + $y;
            return $z;
        }

        echo "5 + 10 = " . sum(5, 10) . "<br>";
        echo "7 + 13 = " . sum(7, 13) . "<br>";
        echo "2 + 4 = " . sum(2, 4);


Passing arguements by reference
When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used
    example ;
        function add_five(&$value) {
            $value += 5;
        }

        $num = 2;
        add_five($num);
        echo $num;

variable number of arguements
By using the ... operator in front of the function parameter, 
the function accepts an unknown number of arguments. Also called a variadic function
The variadic function argument becomes an array

example;
    function sumMyNumbers(...$x) {
        $n = 0;
        $len = count($x);
        for($i = 0; $i < $len; $i++) {
            $n += $x[$i];
    }
        return $n;
    }

    $a = sumMyNumbers(5, 2, 6, 2, 7, 7);
    echo $a;

You can only have one argument with variable length, and it has to be the last argument.

example ;  The variadic argument must be the last argument:

    function myFamily($lastname, ...$firstname) {
        $txt = "";
        $len = count($firstname);
        for($i = 0; $i < $len; $i++) {
            $txt = $txt."Hi, $firstname[$i] $lastname.<br>";
    }
        return $txt;
    }

    $a = myFamily("Doe", "Jane", "John", "Joey");
    echo $a;

If the variadic argument is not the last argument, you will get an error.
example ;

    function myFamily(...$firstname, $lastname) {
        $txt = "";
        $len = count($firstname);
        for($i = 0; $i < $len; $i++) {
            $txt = $txt."Hi, $firstname[$i] $lastname.<br>";
    }
        return $txt;
    }

    $a = myFamily("Doe", "Jane", "John", "Joey");
    echo $a;


return type declarations
The strict declaration forces things to be used in the intended way.



Without strict mode:
phpfunction add(int $a, int $b) {
    return $a + $b;
}
echo add(5, "10"); // Works: converts "10" to 10


With strict mode:
php<?php declare(strict_types=1);

function add(int $a, int $b): int {
    return $a + $b;
}
echo add(5, "10"); // Error! String not allowed